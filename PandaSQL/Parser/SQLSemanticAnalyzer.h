/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : .\\Parser\\SQLSemanticAnalyzer.g
 *     -                            On : 2012-04-23 01:20:42
 *     -           for the tree parser : SQLSemanticAnalyzerTreeParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser 
SQLSemanticAnalyzer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSQLSemanticAnalyzer, which is returned from a call to SQLSemanticAnalyzerNew().
 *
 * The methods in pSQLSemanticAnalyzer are  as follows:
 *
 *  - 
 void
      pSQLSemanticAnalyzer->statement(pSQLSemanticAnalyzer)
 *  - 
 void
      pSQLSemanticAnalyzer->dml_statement(pSQLSemanticAnalyzer)
 *  - 
 void
      pSQLSemanticAnalyzer->select_statement(pSQLSemanticAnalyzer)
 *  - 
 void
      pSQLSemanticAnalyzer->select_list(pSQLSemanticAnalyzer)
 *  - 
 void
      pSQLSemanticAnalyzer->from_clause(pSQLSemanticAnalyzer)
 *  - 
 SQLSemanticAnalyzer_table_name_return
      pSQLSemanticAnalyzer->table_name(pSQLSemanticAnalyzer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SQLSemanticAnalyzer_H
#define _SQLSemanticAnalyzer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SQLSemanticAnalyzer_Ctx_struct SQLSemanticAnalyzer, * pSQLSemanticAnalyzer;





#include "Parser/SQLParserDriver.h"




#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct SQLSemanticAnalyzer_table_name_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
}
    SQLSemanticAnalyzer_table_name_return;




/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet()
 */
 /** Definition of the statement scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  SQLSemanticAnalyzer_statementPush().
 */
typedef struct  SQLSemanticAnalyzer_statement_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct SQLSemanticAnalyzer_statement_SCOPE_struct * frame);

    /* =============================================================================
     * Programmer defined variables...
     */
    PandaSQL::SQLParserDriver *pDriver;

    /* End of programmer defined variables
     * =============================================================================
     */
}
    SQLSemanticAnalyzer_statement_SCOPE, * pSQLSemanticAnalyzer_statement_SCOPE;


/** Context tracking structure for 
SQLSemanticAnalyzer

 */
struct SQLSemanticAnalyzer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;

    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  statement stack for use by pSQLSemanticAnalyzer_statementPush()
     *  and pSQLSemanticAnalyzer_statementPop()
     */
    pANTLR3_STACK pSQLSemanticAnalyzer_statementStack;
    ANTLR3_UINT32 pSQLSemanticAnalyzer_statementStack_limit;
    pSQLSemanticAnalyzer_statement_SCOPE   (*pSQLSemanticAnalyzer_statementPush)(struct SQLSemanticAnalyzer_Ctx_struct * ctx);
    pSQLSemanticAnalyzer_statement_SCOPE   pSQLSemanticAnalyzer_statementTop;




     void
     (*statement)	(struct SQLSemanticAnalyzer_Ctx_struct * ctx, PandaSQL::SQLParserDriver *io_pDriver);

     void
     (*dml_statement)	(struct SQLSemanticAnalyzer_Ctx_struct * ctx);

     void
     (*select_statement)	(struct SQLSemanticAnalyzer_Ctx_struct * ctx);

     void
     (*select_list)	(struct SQLSemanticAnalyzer_Ctx_struct * ctx);

     void
     (*from_clause)	(struct SQLSemanticAnalyzer_Ctx_struct * ctx);

     SQLSemanticAnalyzer_table_name_return
     (*table_name)	(struct SQLSemanticAnalyzer_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SQLSemanticAnalyzer_Ctx_struct * ctx);
    void	    (*free)   (struct SQLSemanticAnalyzer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSQLSemanticAnalyzer SQLSemanticAnalyzerNew         (
pANTLR3_COMMON_TREE_NODE_STREAM
 instream);
ANTLR3_API pSQLSemanticAnalyzer SQLSemanticAnalyzerNewSSD      (
pANTLR3_COMMON_TREE_NODE_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
tree parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__15      15
#define T__16      16
#define Digit      4
#define IDENTIFIER      5
#define KW_FROM      6
#define KW_SELECT      7
#define KW_TABLE      8
#define Letter      9
#define TOK_ALL_COLUMNS      10
#define TOK_COLUMN_LIST      11
#define TOK_FROM      12
#define TOK_TABLE_NAME      13
#define WS      14
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SQLSemanticAnalyzer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
